{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/raytaylorism/source/favicon.png","path":"favicon.png","modified":1,"renderable":1},{"_id":"themes/raytaylorism/source/weixin_favicon.png","path":"weixin_favicon.png","modified":1,"renderable":1},{"_id":"themes/raytaylorism/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/raytaylorism/source/js/prettify.js","path":"js/prettify.js","modified":1,"renderable":1},{"_id":"themes/raytaylorism/source/js/jquery-2.1.1.min.js","path":"js/jquery-2.1.1.min.js","modified":1,"renderable":1},{"_id":"themes/raytaylorism/source/js/materialize.min.js","path":"js/materialize.min.js","modified":1,"renderable":1},{"_id":"themes/raytaylorism/source/css/images/side-user-cover.jpg","path":"css/images/side-user-cover.jpg","modified":1,"renderable":1},{"_id":"themes/raytaylorism/source/css/lib/font-awesome.min.css","path":"css/lib/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/raytaylorism/source/css/lib/prettify-tomorrow-night-eighties.css","path":"css/lib/prettify-tomorrow-night-eighties.css","modified":1,"renderable":1},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Bold.eot","path":"css/font/roboto/Roboto-Bold.eot","modified":1,"renderable":1},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Bold.woff","path":"css/font/roboto/Roboto-Bold.woff","modified":1,"renderable":1},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Bold.woff2","path":"css/font/roboto/Roboto-Bold.woff2","modified":1,"renderable":1},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Light.eot","path":"css/font/roboto/Roboto-Light.eot","modified":1,"renderable":1},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Light.woff","path":"css/font/roboto/Roboto-Light.woff","modified":1,"renderable":1},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Light.woff2","path":"css/font/roboto/Roboto-Light.woff2","modified":1,"renderable":1},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Medium.eot","path":"css/font/roboto/Roboto-Medium.eot","modified":1,"renderable":1},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Medium.woff","path":"css/font/roboto/Roboto-Medium.woff","modified":1,"renderable":1},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Regular.eot","path":"css/font/roboto/Roboto-Regular.eot","modified":1,"renderable":1},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Medium.woff2","path":"css/font/roboto/Roboto-Medium.woff2","modified":1,"renderable":1},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Regular.woff","path":"css/font/roboto/Roboto-Regular.woff","modified":1,"renderable":1},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Regular.woff2","path":"css/font/roboto/Roboto-Regular.woff2","modified":1,"renderable":1},{"_id":"themes/raytaylorism/source/css/lib/materialize.min.css","path":"css/lib/materialize.min.css","modified":1,"renderable":1},{"_id":"themes/raytaylorism/source/css/font/font-awesome/FontAwesome.otf","path":"css/font/font-awesome/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/raytaylorism/source/css/font/font-awesome/fontawesome-webfont.eot","path":"css/font/font-awesome/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/raytaylorism/source/css/font/font-awesome/fontawesome-webfont.woff","path":"css/font/font-awesome/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/raytaylorism/source/css/font/font-awesome/fontawesome-webfont.woff2","path":"css/font/font-awesome/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Bold.ttf","path":"css/font/roboto/Roboto-Bold.ttf","modified":1,"renderable":1},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Light.ttf","path":"css/font/roboto/Roboto-Light.ttf","modified":1,"renderable":1},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Medium.ttf","path":"css/font/roboto/Roboto-Medium.ttf","modified":1,"renderable":1},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Regular.ttf","path":"css/font/roboto/Roboto-Regular.ttf","modified":1,"renderable":1},{"_id":"themes/raytaylorism/source/css/font/font-awesome/fontawesome-webfont.ttf","path":"css/font/font-awesome/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/raytaylorism/source/css/font/font-awesome/fontawesome-webfont.svg","path":"css/font/font-awesome/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"themes/raytaylorism/.gitignore","hash":"3ba1b7b4baceca12575cc0f212e13a504af994a7","modified":1464838780202},{"_id":"themes/raytaylorism/Gruntfile.js","hash":"f0c204fc7b3343417cc1a0fdca12ab089394b654","modified":1464838780202},{"_id":"themes/raytaylorism/LICENSE","hash":"391dd84c2091363936603d63cc71ba1628a13c86","modified":1464838780202},{"_id":"themes/raytaylorism/README.md","hash":"bf8df6438673c93be9e416f0e99d3781d1017cf8","modified":1464838780202},{"_id":"themes/raytaylorism/_config.yml","hash":"4ed27b49fb396ac8c90a9bb2c3f6988b321140c5","modified":1464838780202},{"_id":"themes/raytaylorism/log.md","hash":"e6b93891f941c723524b143b69b0d303064db54b","modified":1464838780202},{"_id":"source/_posts/Hexo博客使用文档.md","hash":"b7da526554bebd7ecbc400f35eff7f5df6d72968","modified":1464840857642},{"_id":"source/_posts/Hexo博客使用文档.md~","hash":"12ea879830cf5054cf0f28b4c6fac5e3161879ad","modified":1464840838414},{"_id":"source/_posts/My-New-Post.md~","hash":"3ceda86d91d560bf65d6b0c6e28732d98327ccf6","modified":1464748925771},{"_id":"source/_posts/Service与Activity通信.md~","hash":"f2ee6dbcf859b96737d90164bc5f88c8117eab02","modified":1465869257256},{"_id":"source/_posts/Service与Activity通信.md","hash":"90d9ce5268fb9420e6e812ebf447fa628dcfcf1f","modified":1465869707956},{"_id":"source/_posts/Ubuntu 14.04 Hexo博客使用文档.md~","hash":"9b0d677789c6937268666a519222452103e082d8","modified":1464838380474},{"_id":"source/_posts/Ubuntu上使用React-Native.md","hash":"41fd90526ac92373df9921b04a97df5b5833c36e","modified":1465872130120},{"_id":"source/_posts/Ubuntu上使用React-Native.md~","hash":"1bcfcd9ab9391d6d287b46712bbca8c278cca87a","modified":1465872034580},{"_id":"source/_posts/在Linux上使用React-Native.md~","hash":"b6cacc4786985214b2e5f55d329dec44c77bb9f9","modified":1465871257764},{"_id":"themes/raytaylorism/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1464838780198},{"_id":"themes/raytaylorism/.git/config","hash":"71b9b96c31baaa534ae41145af7e6c6f5518aed3","modified":1464838780198},{"_id":"themes/raytaylorism/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1464838703826},{"_id":"themes/raytaylorism/.git/index","hash":"10f36ae45be7f03a6bcdbf7e68ebafc2e63eee87","modified":1464838780230},{"_id":"themes/raytaylorism/.git/packed-refs","hash":"c7efca272e159854f8ea91b0973f3ee50a6ee917","modified":1464838780182},{"_id":"themes/raytaylorism/_data/hint.json","hash":"178fe345ea95511364ed70da86186cb834947993","modified":1464838780202},{"_id":"themes/raytaylorism/_data/about.json","hash":"ad37c7a373e24ba9fb26630b0e761cabb3431b90","modified":1464838780202},{"_id":"themes/raytaylorism/_data/link.json","hash":"b865125d0440e6717ee3d88d1b518a4ebdb32d61","modified":1464838780202},{"_id":"themes/raytaylorism/_data/reading.json","hash":"e8045e22b2d499a5d813320a8c2b1bccdbedd46d","modified":1464838780202},{"_id":"themes/raytaylorism/_data/slider.json","hash":"361373b57cfb5371027af42000bbaec4e03333a3","modified":1464838780202},{"_id":"themes/raytaylorism/languages/default.yml","hash":"1edc787d80be4c87e7cd94554da7c811295ab369","modified":1464838780202},{"_id":"themes/raytaylorism/languages/zh-CN.yml","hash":"2771b0642b324063b0bbf1415352bea1b61bc99e","modified":1464838780202},{"_id":"themes/raytaylorism/languages/zh-TW.yml","hash":"b3c05b36011e938204b89e48864b5c4e656816bc","modified":1464838780202},{"_id":"themes/raytaylorism/layout/about.ejs","hash":"54e74d61dba41f173f111e32deeb58447260f0e3","modified":1464838780202},{"_id":"themes/raytaylorism/layout/archive.ejs","hash":"0a21af8903e95c6d8bb7554b089ac219e8708ad7","modified":1464838780202},{"_id":"themes/raytaylorism/layout/index.ejs","hash":"34cbcb6c75e2eef622fea6fecebfe15fb7522a95","modified":1464838780202},{"_id":"themes/raytaylorism/layout/layout.ejs","hash":"0fbced6bf0129f550ad66d57735d269b70728b49","modified":1464838780202},{"_id":"themes/raytaylorism/layout/post.ejs","hash":"8e550fd95ef761909294ed3a4aa428ff0509fbf0","modified":1464838780202},{"_id":"themes/raytaylorism/layout/page.ejs","hash":"90441f114859ce63ef7c7d93d668dbe5939995c2","modified":1464838780202},{"_id":"themes/raytaylorism/layout/reading.ejs","hash":"8ff2e67f23d265dbbf07db26bce6277ba72d8511","modified":1464838780202},{"_id":"themes/raytaylorism/layout/tag.ejs","hash":"42ecab14917abd40c0a38e6ab629f089352a24b1","modified":1464838780202},{"_id":"themes/raytaylorism/source/favicon.png","hash":"d44008b0d6298287cdcfe744a2c8c562569f67ff","modified":1464838780230},{"_id":"themes/raytaylorism/source/weixin_favicon.png","hash":"4a8466bd7d8cf4753cab8fb68647b40b91a246ad","modified":1464838780230},{"_id":"themes/raytaylorism/.git/hooks/applypatch-msg.sample","hash":"86b9655a9ebbde13ac8dd5795eb4d5b539edab0f","modified":1464838703826},{"_id":"themes/raytaylorism/.git/hooks/pre-applypatch.sample","hash":"42fa41564917b44183a50c4d94bb03e1768ddad8","modified":1464838703826},{"_id":"themes/raytaylorism/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1464838703826},{"_id":"themes/raytaylorism/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1464838703826},{"_id":"themes/raytaylorism/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1464838703826},{"_id":"themes/raytaylorism/.git/hooks/pre-push.sample","hash":"b4ad74c989616b7395dc6c9fce9871bb1e86dfb5","modified":1464838703826},{"_id":"themes/raytaylorism/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1464838703826},{"_id":"themes/raytaylorism/.git/hooks/pre-rebase.sample","hash":"18be3eb275c1decd3614e139f5a311b75f1b0ab8","modified":1464838703826},{"_id":"themes/raytaylorism/.git/hooks/update.sample","hash":"39355a075977d05708ef74e1b66d09a36e486df1","modified":1464838703826},{"_id":"themes/raytaylorism/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1464838703826},{"_id":"themes/raytaylorism/.git/logs/HEAD","hash":"833a742589a2253edd354dcdf277329e6591aa86","modified":1464838780198},{"_id":"themes/raytaylorism/_md/about/index.md","hash":"ee081f0766b1bbdd72b9a254a934033878dd1571","modified":1464838780202},{"_id":"themes/raytaylorism/_md/reading/index.md","hash":"ffe64363f79a74ca022f15447a03a96808c64794","modified":1464838780202},{"_id":"themes/raytaylorism/layout/_partial/archive.ejs","hash":"a2c9a472b554561a3a6f3ef7ec0ece9b1c93ebab","modified":1464838780202},{"_id":"themes/raytaylorism/layout/_partial/after_footer.ejs","hash":"c08bd5842924581f20f3a588770c2f7aeaa52404","modified":1464838780202},{"_id":"themes/raytaylorism/layout/_partial/archive_title.ejs","hash":"3dc915d0ce299510a985d40b9bc8a3e173439b43","modified":1464838780202},{"_id":"themes/raytaylorism/layout/_partial/article.ejs","hash":"9dc23a8faceca79855ec571c25e399edb1a740a2","modified":1464838780202},{"_id":"themes/raytaylorism/layout/_partial/construction.ejs","hash":"21190b5a0d567ed4ea5d5289459690b72c1452f0","modified":1464838780202},{"_id":"themes/raytaylorism/layout/_partial/feature_guide.ejs","hash":"752d5c0a4a6f2f2228ae99bb6bede195080a15d8","modified":1464838780202},{"_id":"themes/raytaylorism/layout/_partial/float.ejs","hash":"a561efd4b391988f4ab71562b62e58fb744dc61a","modified":1464838780202},{"_id":"themes/raytaylorism/layout/_partial/footer.ejs","hash":"42796d6fca3a62bb25816b35aa40390b16939f23","modified":1464838780202},{"_id":"themes/raytaylorism/layout/_partial/head.ejs","hash":"406c0bdb3ef224bb5ec375123426a0babae2724a","modified":1464838780202},{"_id":"themes/raytaylorism/layout/_partial/pagenav.ejs","hash":"e7ada8faaee878ea4dde267d1b420bb45421670d","modified":1464838780202},{"_id":"themes/raytaylorism/layout/_partial/menu_drawer.ejs","hash":"28a46dd851b971216c788ace1ca5609d961c2446","modified":1464838780202},{"_id":"themes/raytaylorism/layout/_partial/pagination.ejs","hash":"247c1507971b3e41ed539dd7f8d15af8e21c0d58","modified":1464838780202},{"_id":"themes/raytaylorism/layout/_partial/search.ejs","hash":"1285a8ecb670f6460b31c0fbca9af13b202f5838","modified":1464838780202},{"_id":"themes/raytaylorism/layout/_partial/side_nav.ejs","hash":"b12e72453fb981924d17fa48904af6951f07450f","modified":1464838780202},{"_id":"themes/raytaylorism/layout/_partial/slider.ejs","hash":"bb7b53f6ca9c852808d955fb074f88112e51ea59","modified":1464838780202},{"_id":"themes/raytaylorism/layout/_partial/simple_article.ejs","hash":"86c62b38b1664244c45587b02f7c99e28fa3abee","modified":1464838780202},{"_id":"themes/raytaylorism/layout/_partial/header.ejs","hash":"426eeb374b409a6ab6eb8e21a7213b6a6147d6f9","modified":1464838780202},{"_id":"themes/raytaylorism/layout/_widget/blogroll.ejs","hash":"cf42209342e51e1729dcc9b01b1e5497f152844f","modified":1464838780202},{"_id":"themes/raytaylorism/layout/_widget/category.ejs","hash":"fb2d42083c97dfaba2717fb2e63e744259ec4530","modified":1464838780202},{"_id":"themes/raytaylorism/layout/_widget/recent_posts.ejs","hash":"0025878eb4cbf17ddc909f82497e9c73e4091c20","modified":1464838780202},{"_id":"themes/raytaylorism/layout/_widget/tag.ejs","hash":"bc8e48d8afbe7e882cea13b07b634b5ce63e7b61","modified":1464838780202},{"_id":"themes/raytaylorism/layout/_widget/tagcloud.ejs","hash":"1da338304f94f042606b73e235e9c725628c34ad","modified":1464838780202},{"_id":"themes/raytaylorism/source/css/style.styl","hash":"2c7ef7179e29084efe77c653d537b56889734a22","modified":1464838780230},{"_id":"themes/raytaylorism/source/js/prettify.js","hash":"d24b1da342b5c2d0582f0922118aaf0b2a6840d5","modified":1464838780230},{"_id":"themes/raytaylorism/source/js/jquery-2.1.1.min.js","hash":"afb90752e0a90c24b7f724faca86c5f3d15d1178","modified":1464838780230},{"_id":"themes/raytaylorism/source/js/materialize.min.js","hash":"c7dd063bd620bd9a96341d9dc03258ca2dc6e06b","modified":1464838780230},{"_id":"themes/raytaylorism/.git/objects/pack/pack-351d50a479f01fca905282c6625ffaa6525fea3d.idx","hash":"41430766ed99a65071a8de1df9f716fe94c6ffa5","modified":1464838780094},{"_id":"themes/raytaylorism/.git/refs/heads/master","hash":"5c0ca6334683c9d0c3d46d7ecdd14765a3103d1b","modified":1464838780198},{"_id":"themes/raytaylorism/layout/_partial/post/category.ejs","hash":"f48f487dc952f5703d9bc7737fc6eb2e6b439608","modified":1464838780202},{"_id":"themes/raytaylorism/layout/_partial/post/gallery.ejs","hash":"0adb673358b42b9ac52b2c1f72b92368cdcf5f2e","modified":1464838780202},{"_id":"themes/raytaylorism/layout/_partial/post/tablecontents.ejs","hash":"a851061909d4e27321d1792a262f55385529fb2d","modified":1464838780202},{"_id":"themes/raytaylorism/layout/_partial/post/tag.ejs","hash":"36cbf8f85f93be441d47d1a4a0584afd85480d4f","modified":1464838780202},{"_id":"themes/raytaylorism/layout/_partial/post/time.ejs","hash":"166534f9231b5c77c76d9d4fb40f66e2e918837d","modified":1464838780202},{"_id":"themes/raytaylorism/layout/_partial/post/title.ejs","hash":"7e48dc0d240ab4bbea27dcb383fb56fb9656c6a9","modified":1464838780202},{"_id":"themes/raytaylorism/layout/_partial/plugin/analytics.ejs","hash":"b88303620558f833c6d7505af762d12e21f90f90","modified":1464838780202},{"_id":"themes/raytaylorism/layout/_partial/plugin/google_code_prettify.ejs","hash":"3aecf1e3e706417131918e3f489557e2d5f438af","modified":1464838780202},{"_id":"themes/raytaylorism/layout/_partial/plugin/comment.ejs","hash":"a095ef55ca52e6db052a4e3c93ced2eb6cedf589","modified":1464838780202},{"_id":"themes/raytaylorism/layout/_partial/plugin/main_javascript.ejs","hash":"7cb7addc89cf636e5862f928dbeaa867525ab799","modified":1464838780202},{"_id":"themes/raytaylorism/layout/_partial/plugin/mathjax.ejs","hash":"f0e5e249d2bd6dc2a72baf0f71d2d67463c7b3ad","modified":1464838780202},{"_id":"themes/raytaylorism/layout/_partial/plugin/noscript.ejs","hash":"182650c8be93b093997ac4d5fe14af2f835b98d9","modified":1464838780202},{"_id":"themes/raytaylorism/layout/_partial/plugin/reward.ejs","hash":"fde8d42347f72f3b3594c36b1f3c94c6d90a31b6","modified":1464838780202},{"_id":"themes/raytaylorism/source/css/_base/icons.css","hash":"ab167f1694ffe10c3c51d18a633efd41be121555","modified":1464838780202},{"_id":"themes/raytaylorism/source/css/_base/layout.styl","hash":"14a747f9fce53f586d11ed67a597a8e71a802d17","modified":1464838780202},{"_id":"themes/raytaylorism/source/css/_base/lib_customize.styl","hash":"54848f767f3e573507341bc15788ca9df2cb812e","modified":1464838780202},{"_id":"themes/raytaylorism/source/css/_base/variable.styl","hash":"6812c6940c7c59b9fab5b41e6b832e89416d11c5","modified":1464838780202},{"_id":"themes/raytaylorism/source/css/images/side-user-cover.jpg","hash":"d8d73a64d6d5af83a27e6af1d4fedef808955ba0","modified":1464838780230},{"_id":"themes/raytaylorism/source/css/_partial/about.styl","hash":"b0f80e89e7518d49190b79985c10c8a7b24bfa19","modified":1464838780202},{"_id":"themes/raytaylorism/source/css/_partial/archive.styl","hash":"d912cf297c10e78bd90f3210d596ec87a16f74ad","modified":1464838780202},{"_id":"themes/raytaylorism/source/css/_partial/article.styl","hash":"94bdf4d6da4ec154124ac66008c8dff66882c7e4","modified":1464838780202},{"_id":"themes/raytaylorism/source/css/_partial/comment.styl","hash":"bfa4d7caedffffab18b29f70db9cbf2a15a5f24b","modified":1464838780202},{"_id":"themes/raytaylorism/source/css/_partial/footer.styl","hash":"c0d422ce12e0565915148079aa1a134773588568","modified":1464838780202},{"_id":"themes/raytaylorism/source/css/_partial/header.styl","hash":"534686e8e9de54e8dd99eb1b064f5ad3a0199a4e","modified":1464838780202},{"_id":"themes/raytaylorism/source/css/_partial/index.styl","hash":"27918d50e5a69899f184280d9e0048576ac3c85d","modified":1464838780202},{"_id":"themes/raytaylorism/source/css/_partial/link_context.styl","hash":"cd403f732319354781c552d26d37bad7c4450ad5","modified":1464838780202},{"_id":"themes/raytaylorism/source/css/_partial/other.styl","hash":"8be9dcf7b70f8e4693a2590bb38997273e01bca7","modified":1464838780202},{"_id":"themes/raytaylorism/source/css/_partial/reading.styl","hash":"7abecdfc7fd21f7d11f1568d430418296b34945a","modified":1464838780202},{"_id":"themes/raytaylorism/source/css/_partial/search.styl","hash":"caef055a95598415656c417e662264397363704b","modified":1464838780202},{"_id":"themes/raytaylorism/source/css/_partial/side_nav.styl","hash":"46b1fafd522930a2d525ba3e44b9a06fd960268a","modified":1464838780202},{"_id":"themes/raytaylorism/source/css/_partial/slider.styl","hash":"8933a67e92680dbdfd6af7c2ecaa8d86346df907","modified":1464838780202},{"_id":"themes/raytaylorism/source/css/_partial/syntax.styl","hash":"a6fb3790c982034fed3e9caee6b7025d0d645cfa","modified":1464838780202},{"_id":"themes/raytaylorism/source/css/_partial/tablecontents.styl","hash":"7bbd7f34aae24b6af38fdd79ea3c85546d12eca4","modified":1464838780202},{"_id":"themes/raytaylorism/source/css/lib/font-awesome.min.css","hash":"683d12731b7429d32ec7de00a6706602e403013f","modified":1464838780230},{"_id":"themes/raytaylorism/source/css/lib/prettify-tomorrow-night-eighties.css","hash":"35e07bd7a4585363060edd558a0e9939e7e68323","modified":1464838780230},{"_id":"themes/raytaylorism/.git/logs/refs/heads/master","hash":"833a742589a2253edd354dcdf277329e6591aa86","modified":1464838780198},{"_id":"themes/raytaylorism/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1464838780182},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Bold.eot","hash":"a76cd602f5188b9fbd4ba7443dcb9c064e3dbf10","modified":1464838780226},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Bold.woff","hash":"ee99cd87a59a9a5d4092c83232bb3eec67547425","modified":1464838780226},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Bold.woff2","hash":"933b866d09c2b087707a98dab64b3888865eeb96","modified":1464838780226},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Light.eot","hash":"42fe156996197e5eb0c0264c5d1bb3b4681f4595","modified":1464838780226},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Light.woff","hash":"6300f659be9e834ab263efe2fb3c581d48b1e7b2","modified":1464838780226},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Light.woff2","hash":"bbdc28b887400fcb340b504ec2904993af42a5d7","modified":1464838780226},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Medium.eot","hash":"1517f4b6e1c5d0e5198f937557253aac8fab0416","modified":1464838780226},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Medium.woff","hash":"d45f84922131364989ad6578c7a06b6b4fc22c34","modified":1464838780226},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Regular.eot","hash":"77ae3e980ec03863ebe2587a8ef9ddfd06941db0","modified":1464838780226},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Medium.woff2","hash":"6cc1b73571af9e827c4e7e91418f476703cd4c4b","modified":1464838780226},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Regular.woff","hash":"74734dde8d94e7268170f9b994dedfbdcb5b3a15","modified":1464838780230},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Regular.woff2","hash":"ed1558b0541f5e01ce48c7db1588371b990eec19","modified":1464838780230},{"_id":"themes/raytaylorism/source/css/lib/materialize.min.css","hash":"ca9b5271c307593264daad9753b962a0a8db1cef","modified":1464838780230},{"_id":"themes/raytaylorism/source/css/font/font-awesome/FontAwesome.otf","hash":"42c179eef588854b5ec151bcf6a3f58aa8b79b11","modified":1464838780222},{"_id":"themes/raytaylorism/source/css/font/font-awesome/fontawesome-webfont.eot","hash":"986eed8dca049714e43eeebcb3932741a4bec76d","modified":1464838780222},{"_id":"themes/raytaylorism/source/css/font/font-awesome/fontawesome-webfont.woff","hash":"4a313eb93b959cc4154c684b915b0a31ddb68d84","modified":1464838780226},{"_id":"themes/raytaylorism/source/css/font/font-awesome/fontawesome-webfont.woff2","hash":"638c652d623280a58144f93e7b552c66d1667a11","modified":1464838780226},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Bold.ttf","hash":"47327df0f35e7cd7c8645874897a7449697544ae","modified":1464838780226},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Light.ttf","hash":"e321c183e2b75ee19813892b7bac8d7c411cb88a","modified":1464838780226},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Medium.ttf","hash":"6060ca726b9760b76f7c347dce9d2fa1fe42ec92","modified":1464838780226},{"_id":"themes/raytaylorism/source/css/font/roboto/Roboto-Regular.ttf","hash":"824b5480c977a8166e177e5357d13164ccc45f47","modified":1464838780230},{"_id":"themes/raytaylorism/.git/logs/refs/remotes/origin/HEAD","hash":"833a742589a2253edd354dcdf277329e6591aa86","modified":1464838780198},{"_id":"themes/raytaylorism/source/css/font/font-awesome/fontawesome-webfont.ttf","hash":"6484f1af6b485d5096b71b344e67f4164c33dd1f","modified":1464838780226},{"_id":"themes/raytaylorism/source/css/font/font-awesome/fontawesome-webfont.svg","hash":"b06b5c8f67fd632cdc62a33b62ae4f74194131b3","modified":1464838780222},{"_id":"themes/raytaylorism/.git/objects/pack/pack-351d50a479f01fca905282c6625ffaa6525fea3d.pack","hash":"1eb39e2b802427eec39b92054f83429e9fbf2355","modified":1464838780094}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"Ubuntu 14.04 Hexo博客使用文档","date":"2016-06-01T02:15:39.000Z","_content":"\n\n\n> Hexo简介\n\nhexo是一个基于Node.js的静态博客程序,可以方便的生成静态网页托管在Github上\n\n> 使用环境\n\n- Ubuntu 14.04\n- Node.js  v6.0.0\n- Npm 3.8.6     \n\n> 搭建步骤\n\n- 注册github账号,创建一个yourname.github.io的仓库\n- 买个喜欢的域名(阿里云:https://wanwang.aliyun.com)\n- 下载Node.js、Git(网上教程一大把)\n- 安装`Hexo npm install -g hexo`\n- 生成ssh密钥\n- 配置主题\n- 部署到Github上\n\n> 关键部分详细步骤\n\n#### 1.注册Github,创建Repository\n\nRepositories中创建一个以自己用户名+”.github.io”创建的repository（仓库）,记住要与用户名一致!然后再本地创建blog文件夹执行`git clone  你的仓库地址`\n\n#### 2.生成ssh密钥\n\n2.1 进入~/.ssh文件夹是否存在\n\n2.2 生成 ssh 密钥:`$ ssh-keygen -t rsa -C “your email address”`\n\n连续按3个回车（密码默认为空），得到 `id_rsa `和`id_rsa.pub` 文件，说明生成成功\n\n2.3添加密钥到 Github\n\n打开 Github，登录自己的账号后\n点击自己的头像->settings->SSH Keys->Add SSH key\n将本地 `id_rsa.pub` 中的内容粘贴到 Key 文本框中，随意输入一个 title，点击 Add Key 即可\n\n2.4测试是否成功:`ssh git@github.com`\n这样子就是成功了^,^~\n\n#### 3.初始化自己的博客\n\n3.1进入之前创建的blog文件夹,执行命令`hexo init`这样博客框架就完成了\n\n3.2执行命令`hexo generate` ,`hexo server`\n 后本地服务器就开启了,这时候就可以在浏览器中已localhost:4000访问到了\n\n#### 4.配置主题\n\n到网上找一个喜欢的主题克隆到本地文件夹,然后扔到theme文件夹,更改_config.yml中的theme: 你的主题名称\n\n#### 5.部署博客到Github上\n在_config.yml最后一行加入\n\n```\ndeploy:\n  type: git\n  repo: https://github.com/ColinFly/ColinFly.github.io.git\n  branch: master\n```\n\n执行命令`hexo g`进行部署，再执行命令`hexo d`进行发布，发布成功后，在浏览器中输入你Github的二级域名，如：https://colinfly.github.io 就可以看到你发布的网站了，不过如果想通过你申请的一级域名来访问的话还需要在你的blog的source目录下新建CNAME文件，里面输入你的域名地址，再进行部署及发布就行。\n每次部署的步骤，可按以下三步来进行：\n```\nhexo clean\nhexo generate\nhexo deploy\n```\n\n#### 6.hexo常用命令\n\n```\nhexo new\"postName\" #新建文章\nhexo new page\"pageName\" #新建页面\nhexo generate #生成静态页面至public目录\nhexo server #开启预览访问端口（默认端口4000，'ctrl + c'关闭server）\nhexo deploy #将.deploy目录部署到GitHub\nhexo help # 查看帮助\nhexo version #查看Hexo的版本\n```\n简写:\n\n```\nhexo n == hexo new\nhexo g == hexo generate\nhexo s == hexo server\nhexo d == hexo deploy\n```\n\n#### 7.常见问题\n\n1.`ERROR Deployer not found: git 或者 ERROR Deployer not found: github`，执行命令`npm install hexo-deployer-git --save`；\n2.`ERROR Plugin load failed: hexo-server`，执行命令：`sudo npm install hexo-server`\n\n#### 8.参考链接\n\n搭建Hexo博客中碰到的坑:http://www.jianshu.com/p/a2fe56d11c4f\n通过Hexo在Github上搭建博客教程http://www.jianshu.com/p/858ecf233db9\n","source":"_posts/Hexo博客使用文档.md","raw":"\n---\ntitle: Ubuntu 14.04 Hexo博客使用文档\ndate: 2016-06-01 10:15:39\ntags: Hexo\n---\n\n\n\n> Hexo简介\n\nhexo是一个基于Node.js的静态博客程序,可以方便的生成静态网页托管在Github上\n\n> 使用环境\n\n- Ubuntu 14.04\n- Node.js  v6.0.0\n- Npm 3.8.6     \n\n> 搭建步骤\n\n- 注册github账号,创建一个yourname.github.io的仓库\n- 买个喜欢的域名(阿里云:https://wanwang.aliyun.com)\n- 下载Node.js、Git(网上教程一大把)\n- 安装`Hexo npm install -g hexo`\n- 生成ssh密钥\n- 配置主题\n- 部署到Github上\n\n> 关键部分详细步骤\n\n#### 1.注册Github,创建Repository\n\nRepositories中创建一个以自己用户名+”.github.io”创建的repository（仓库）,记住要与用户名一致!然后再本地创建blog文件夹执行`git clone  你的仓库地址`\n\n#### 2.生成ssh密钥\n\n2.1 进入~/.ssh文件夹是否存在\n\n2.2 生成 ssh 密钥:`$ ssh-keygen -t rsa -C “your email address”`\n\n连续按3个回车（密码默认为空），得到 `id_rsa `和`id_rsa.pub` 文件，说明生成成功\n\n2.3添加密钥到 Github\n\n打开 Github，登录自己的账号后\n点击自己的头像->settings->SSH Keys->Add SSH key\n将本地 `id_rsa.pub` 中的内容粘贴到 Key 文本框中，随意输入一个 title，点击 Add Key 即可\n\n2.4测试是否成功:`ssh git@github.com`\n这样子就是成功了^,^~\n\n#### 3.初始化自己的博客\n\n3.1进入之前创建的blog文件夹,执行命令`hexo init`这样博客框架就完成了\n\n3.2执行命令`hexo generate` ,`hexo server`\n 后本地服务器就开启了,这时候就可以在浏览器中已localhost:4000访问到了\n\n#### 4.配置主题\n\n到网上找一个喜欢的主题克隆到本地文件夹,然后扔到theme文件夹,更改_config.yml中的theme: 你的主题名称\n\n#### 5.部署博客到Github上\n在_config.yml最后一行加入\n\n```\ndeploy:\n  type: git\n  repo: https://github.com/ColinFly/ColinFly.github.io.git\n  branch: master\n```\n\n执行命令`hexo g`进行部署，再执行命令`hexo d`进行发布，发布成功后，在浏览器中输入你Github的二级域名，如：https://colinfly.github.io 就可以看到你发布的网站了，不过如果想通过你申请的一级域名来访问的话还需要在你的blog的source目录下新建CNAME文件，里面输入你的域名地址，再进行部署及发布就行。\n每次部署的步骤，可按以下三步来进行：\n```\nhexo clean\nhexo generate\nhexo deploy\n```\n\n#### 6.hexo常用命令\n\n```\nhexo new\"postName\" #新建文章\nhexo new page\"pageName\" #新建页面\nhexo generate #生成静态页面至public目录\nhexo server #开启预览访问端口（默认端口4000，'ctrl + c'关闭server）\nhexo deploy #将.deploy目录部署到GitHub\nhexo help # 查看帮助\nhexo version #查看Hexo的版本\n```\n简写:\n\n```\nhexo n == hexo new\nhexo g == hexo generate\nhexo s == hexo server\nhexo d == hexo deploy\n```\n\n#### 7.常见问题\n\n1.`ERROR Deployer not found: git 或者 ERROR Deployer not found: github`，执行命令`npm install hexo-deployer-git --save`；\n2.`ERROR Plugin load failed: hexo-server`，执行命令：`sudo npm install hexo-server`\n\n#### 8.参考链接\n\n搭建Hexo博客中碰到的坑:http://www.jianshu.com/p/a2fe56d11c4f\n通过Hexo在Github上搭建博客教程http://www.jianshu.com/p/858ecf233db9\n","slug":"Hexo博客使用文档","published":1,"updated":"2016-06-02T04:14:17.642Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciqc6bj1l00006x05zh1ka0b6","content":"<blockquote>\n<p>Hexo简介</p>\n</blockquote>\n<p>hexo是一个基于Node.js的静态博客程序,可以方便的生成静态网页托管在Github上</p>\n<blockquote>\n<p>使用环境</p>\n</blockquote>\n<ul>\n<li>Ubuntu 14.04</li>\n<li>Node.js  v6.0.0</li>\n<li>Npm 3.8.6     </li>\n</ul>\n<blockquote>\n<p>搭建步骤</p>\n</blockquote>\n<ul>\n<li>注册github账号,创建一个yourname.github.io的仓库</li>\n<li>买个喜欢的域名(阿里云:<a href=\"https://wanwang.aliyun.com\" target=\"_blank\" rel=\"external\">https://wanwang.aliyun.com</a>)</li>\n<li>下载Node.js、Git(网上教程一大把)</li>\n<li>安装<code>Hexo npm install -g hexo</code></li>\n<li>生成ssh密钥</li>\n<li>配置主题</li>\n<li>部署到Github上</li>\n</ul>\n<blockquote>\n<p>关键部分详细步骤</p>\n</blockquote>\n<h4 id=\"1-注册Github-创建Repository\"><a href=\"#1-注册Github-创建Repository\" class=\"headerlink\" title=\"1.注册Github,创建Repository\"></a>1.注册Github,创建Repository</h4><p>Repositories中创建一个以自己用户名+”.github.io”创建的repository（仓库）,记住要与用户名一致!然后再本地创建blog文件夹执行<code>git clone  你的仓库地址</code></p>\n<h4 id=\"2-生成ssh密钥\"><a href=\"#2-生成ssh密钥\" class=\"headerlink\" title=\"2.生成ssh密钥\"></a>2.生成ssh密钥</h4><p>2.1 进入~/.ssh文件夹是否存在</p>\n<p>2.2 生成 ssh 密钥:<code>$ ssh-keygen -t rsa -C “your email address”</code></p>\n<p>连续按3个回车（密码默认为空），得到 <code>id_rsa</code>和<code>id_rsa.pub</code> 文件，说明生成成功</p>\n<p>2.3添加密钥到 Github</p>\n<p>打开 Github，登录自己的账号后<br>点击自己的头像-&gt;settings-&gt;SSH Keys-&gt;Add SSH key<br>将本地 <code>id_rsa.pub</code> 中的内容粘贴到 Key 文本框中，随意输入一个 title，点击 Add Key 即可</p>\n<p>2.4测试是否成功:<code>ssh git@github.com</code><br>这样子就是成功了^,^~</p>\n<h4 id=\"3-初始化自己的博客\"><a href=\"#3-初始化自己的博客\" class=\"headerlink\" title=\"3.初始化自己的博客\"></a>3.初始化自己的博客</h4><p>3.1进入之前创建的blog文件夹,执行命令<code>hexo init</code>这样博客框架就完成了</p>\n<p>3.2执行命令<code>hexo generate</code> ,<code>hexo server</code><br> 后本地服务器就开启了,这时候就可以在浏览器中已localhost:4000访问到了</p>\n<h4 id=\"4-配置主题\"><a href=\"#4-配置主题\" class=\"headerlink\" title=\"4.配置主题\"></a>4.配置主题</h4><p>到网上找一个喜欢的主题克隆到本地文件夹,然后扔到theme文件夹,更改_config.yml中的theme: 你的主题名称</p>\n<h4 id=\"5-部署博客到Github上\"><a href=\"#5-部署博客到Github上\" class=\"headerlink\" title=\"5.部署博客到Github上\"></a>5.部署博客到Github上</h4><p>在_config.yml最后一行加入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repo: https://github.com/ColinFly/ColinFly.github.io.git</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure>\n<p>执行命令<code>hexo g</code>进行部署，再执行命令<code>hexo d</code>进行发布，发布成功后，在浏览器中输入你Github的二级域名，如：<a href=\"https://colinfly.github.io\" target=\"_blank\" rel=\"external\">https://colinfly.github.io</a> 就可以看到你发布的网站了，不过如果想通过你申请的一级域名来访问的话还需要在你的blog的source目录下新建CNAME文件，里面输入你的域名地址，再进行部署及发布就行。<br>每次部署的步骤，可按以下三步来进行：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean</span><br><span class=\"line\">hexo generate</span><br><span class=\"line\">hexo deploy</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"6-hexo常用命令\"><a href=\"#6-hexo常用命令\" class=\"headerlink\" title=\"6.hexo常用命令\"></a>6.hexo常用命令</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new&quot;postName&quot; #新建文章</span><br><span class=\"line\">hexo new page&quot;pageName&quot; #新建页面</span><br><span class=\"line\">hexo generate #生成静态页面至public目录</span><br><span class=\"line\">hexo server #开启预览访问端口（默认端口4000，&apos;ctrl + c&apos;关闭server）</span><br><span class=\"line\">hexo deploy #将.deploy目录部署到GitHub</span><br><span class=\"line\">hexo help # 查看帮助</span><br><span class=\"line\">hexo version #查看Hexo的版本</span><br></pre></td></tr></table></figure>\n<p>简写:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo n == hexo new</span><br><span class=\"line\">hexo g == hexo generate</span><br><span class=\"line\">hexo s == hexo server</span><br><span class=\"line\">hexo d == hexo deploy</span><br></pre></td></tr></table></figure>\n<h4 id=\"7-常见问题\"><a href=\"#7-常见问题\" class=\"headerlink\" title=\"7.常见问题\"></a>7.常见问题</h4><p>1.<code>ERROR Deployer not found: git 或者 ERROR Deployer not found: github</code>，执行命令<code>npm install hexo-deployer-git --save</code>；<br>2.<code>ERROR Plugin load failed: hexo-server</code>，执行命令：<code>sudo npm install hexo-server</code></p>\n<h4 id=\"8-参考链接\"><a href=\"#8-参考链接\" class=\"headerlink\" title=\"8.参考链接\"></a>8.参考链接</h4><p>搭建Hexo博客中碰到的坑:<a href=\"http://www.jianshu.com/p/a2fe56d11c4f\" target=\"_blank\" rel=\"external\">http://www.jianshu.com/p/a2fe56d11c4f</a><br>通过Hexo在Github上搭建博客教程<a href=\"http://www.jianshu.com/p/858ecf233db9\" target=\"_blank\" rel=\"external\">http://www.jianshu.com/p/858ecf233db9</a></p>\n","excerpt":"","more":"<blockquote>\n<p>Hexo简介</p>\n</blockquote>\n<p>hexo是一个基于Node.js的静态博客程序,可以方便的生成静态网页托管在Github上</p>\n<blockquote>\n<p>使用环境</p>\n</blockquote>\n<ul>\n<li>Ubuntu 14.04</li>\n<li>Node.js  v6.0.0</li>\n<li>Npm 3.8.6     </li>\n</ul>\n<blockquote>\n<p>搭建步骤</p>\n</blockquote>\n<ul>\n<li>注册github账号,创建一个yourname.github.io的仓库</li>\n<li>买个喜欢的域名(阿里云:<a href=\"https://wanwang.aliyun.com\">https://wanwang.aliyun.com</a>)</li>\n<li>下载Node.js、Git(网上教程一大把)</li>\n<li>安装<code>Hexo npm install -g hexo</code></li>\n<li>生成ssh密钥</li>\n<li>配置主题</li>\n<li>部署到Github上</li>\n</ul>\n<blockquote>\n<p>关键部分详细步骤</p>\n</blockquote>\n<h4 id=\"1-注册Github-创建Repository\"><a href=\"#1-注册Github-创建Repository\" class=\"headerlink\" title=\"1.注册Github,创建Repository\"></a>1.注册Github,创建Repository</h4><p>Repositories中创建一个以自己用户名+”.github.io”创建的repository（仓库）,记住要与用户名一致!然后再本地创建blog文件夹执行<code>git clone  你的仓库地址</code></p>\n<h4 id=\"2-生成ssh密钥\"><a href=\"#2-生成ssh密钥\" class=\"headerlink\" title=\"2.生成ssh密钥\"></a>2.生成ssh密钥</h4><p>2.1 进入~/.ssh文件夹是否存在</p>\n<p>2.2 生成 ssh 密钥:<code>$ ssh-keygen -t rsa -C “your email address”</code></p>\n<p>连续按3个回车（密码默认为空），得到 <code>id_rsa</code>和<code>id_rsa.pub</code> 文件，说明生成成功</p>\n<p>2.3添加密钥到 Github</p>\n<p>打开 Github，登录自己的账号后<br>点击自己的头像-&gt;settings-&gt;SSH Keys-&gt;Add SSH key<br>将本地 <code>id_rsa.pub</code> 中的内容粘贴到 Key 文本框中，随意输入一个 title，点击 Add Key 即可</p>\n<p>2.4测试是否成功:<code>ssh git@github.com</code><br>这样子就是成功了^,^~</p>\n<h4 id=\"3-初始化自己的博客\"><a href=\"#3-初始化自己的博客\" class=\"headerlink\" title=\"3.初始化自己的博客\"></a>3.初始化自己的博客</h4><p>3.1进入之前创建的blog文件夹,执行命令<code>hexo init</code>这样博客框架就完成了</p>\n<p>3.2执行命令<code>hexo generate</code> ,<code>hexo server</code><br> 后本地服务器就开启了,这时候就可以在浏览器中已localhost:4000访问到了</p>\n<h4 id=\"4-配置主题\"><a href=\"#4-配置主题\" class=\"headerlink\" title=\"4.配置主题\"></a>4.配置主题</h4><p>到网上找一个喜欢的主题克隆到本地文件夹,然后扔到theme文件夹,更改_config.yml中的theme: 你的主题名称</p>\n<h4 id=\"5-部署博客到Github上\"><a href=\"#5-部署博客到Github上\" class=\"headerlink\" title=\"5.部署博客到Github上\"></a>5.部署博客到Github上</h4><p>在_config.yml最后一行加入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repo: https://github.com/ColinFly/ColinFly.github.io.git</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure>\n<p>执行命令<code>hexo g</code>进行部署，再执行命令<code>hexo d</code>进行发布，发布成功后，在浏览器中输入你Github的二级域名，如：<a href=\"https://colinfly.github.io\">https://colinfly.github.io</a> 就可以看到你发布的网站了，不过如果想通过你申请的一级域名来访问的话还需要在你的blog的source目录下新建CNAME文件，里面输入你的域名地址，再进行部署及发布就行。<br>每次部署的步骤，可按以下三步来进行：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean</span><br><span class=\"line\">hexo generate</span><br><span class=\"line\">hexo deploy</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"6-hexo常用命令\"><a href=\"#6-hexo常用命令\" class=\"headerlink\" title=\"6.hexo常用命令\"></a>6.hexo常用命令</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new&quot;postName&quot; #新建文章</span><br><span class=\"line\">hexo new page&quot;pageName&quot; #新建页面</span><br><span class=\"line\">hexo generate #生成静态页面至public目录</span><br><span class=\"line\">hexo server #开启预览访问端口（默认端口4000，&apos;ctrl + c&apos;关闭server）</span><br><span class=\"line\">hexo deploy #将.deploy目录部署到GitHub</span><br><span class=\"line\">hexo help # 查看帮助</span><br><span class=\"line\">hexo version #查看Hexo的版本</span><br></pre></td></tr></table></figure>\n<p>简写:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo n == hexo new</span><br><span class=\"line\">hexo g == hexo generate</span><br><span class=\"line\">hexo s == hexo server</span><br><span class=\"line\">hexo d == hexo deploy</span><br></pre></td></tr></table></figure>\n<h4 id=\"7-常见问题\"><a href=\"#7-常见问题\" class=\"headerlink\" title=\"7.常见问题\"></a>7.常见问题</h4><p>1.<code>ERROR Deployer not found: git 或者 ERROR Deployer not found: github</code>，执行命令<code>npm install hexo-deployer-git --save</code>；<br>2.<code>ERROR Plugin load failed: hexo-server</code>，执行命令：<code>sudo npm install hexo-server</code></p>\n<h4 id=\"8-参考链接\"><a href=\"#8-参考链接\" class=\"headerlink\" title=\"8.参考链接\"></a>8.参考链接</h4><p>搭建Hexo博客中碰到的坑:<a href=\"http://www.jianshu.com/p/a2fe56d11c4f\">http://www.jianshu.com/p/a2fe56d11c4f</a><br>通过Hexo在Github上搭建博客教程<a href=\"http://www.jianshu.com/p/858ecf233db9\">http://www.jianshu.com/p/858ecf233db9</a></p>\n"},{"title":"Service与Activity通信","date":"2016-06-14T01:54:17.000Z","_content":"\n#### 主要方法\n- 1.`bindService`\n\n启动的服务可以得到一个Service的一个对象实例，然后我们就可以访问Service中的方法,停止服务使用`unbindService`\n\n- 2.`startService`\n\n启动一个服务执行后台任务，可以用广播的方式返回数据。停止服务使用stopService\n\n#### bindService使用细节\n\n1. 写一个`MyService extends Service`\n2. 通过`Binder`来获取`MyService`\n\n```\npublic IBinder onBind(Intent intent) {\n        return new MsgBinder();\n    }\n\n    /**\n     * 通过Binder对象,当Activity通过调用bindService(Intent service, ServiceConnection conn,int flags),\n     * 我们可以得到一个Service的一个对象实例，然后我们就可以访问Service中的方法\n     */\n    public class MsgBinder extends Binder {\n        public MsgService getService() {\n            return MsgService.this;\n        }\n    }\n```\n\n3. 在Activity中绑定Service并访问Service的方法\n\n```\n case R.id.btn_bind_service:\n                Intent intent = new Intent(mContext,MsgService.class);\n                bindService(intent, connection, Context.BIND_AUTO_CREATE);\n                break;\n case R.id.btn_download_start:\n                //开始下载\n                mMsgService.startDownLoad();\n                //通过接口回调更新进度\n                mMsgService.setListener(new MsgService.ProgressChangeListener() {\n                    @Override\n                    public void onChanged(int progress) {\n                        mProgressBar.setProgress(progress);\n                    }\n                });\n //Service连接的回调接口实现\n    ServiceConnection connection=new ServiceConnection() {\n        @Override\n        public void onServiceConnected(ComponentName name, IBinder service) {\n            //通过binder拿到service对象\n            mMsgService = ((MsgService.MsgBinder) service).getService();\n            Logger.i(\"onServiceConnected\");\n        }\n\n        @Override\n        public void onServiceDisconnected(ComponentName name) {\n\n        }\n    };\n```\n\n#### startService使用细节\n1.`MsgService2 extends Service`\n\n2.不管onBind,重写`onStartCommand`\n\n```\npublic IBinder onBind(Intent intent) {\n        return null;\n    }\n@Override\npublic int onStartCommand(Intent intent, int flags, int startId) {\n        startDownLoad();\n        return super.onStartCommand(intent, flags, startId);\n\n    }\n```\n3.在清单注册Service,注意这时的Service必须带intent-filter,相当于id\n```\n <service android:name=\".service.MsgService2\"  >\n            <!--这个就是Service的Id了-->\n            <intent-filter>\n                <action android:name=\"com.colin.demo.service.Service2\" />\n            </intent-filter>\n</service>\n```\n4.在Activity中使用:\n```\n case R.id.btn_register_broadcast:\n                //通过Action过滤Service\n                mMsgReceiver=new MsgReceiver();\n                registerReceiver(mMsgReceiver, new IntentFilter(\"com.colin.demo.service.Service2\"));\n                Logger.i(\"已注册广播接收器\");\n                break;\ncase R.id.btn_start_service:\n                //启动service\n                mIntent = new Intent(\"com.colin.demo.service.Service2\");\n                startService(mIntent);\n                break;\n /**\n     * 广播接收器\n     * @author len\n     *\n     */\n    public class MsgReceiver extends BroadcastReceiver {\n\n        @Override\n        public void onReceive(Context context, Intent intent) {\n            //拿到进度，更新UI\n            int progress = intent.getIntExtra(\"progress\", 0);\n            Logger.i(\"拿到进度，更新UI  \");\n            mProgressBar.setProgress(progress);\n        }\n\n}\n```\n\n#### 最后\n1.记得干掉服务\n\n```\n@Override\n    protected void onDestroy() {\n        //销毁服务\n        unbindService(connection);\n\n        //停止服务\n        stopService(mIntent);\n        //注销广播\n        unregisterReceiver(mMsgReceiver);\n        super.onDestroy();\n    }\n```\n2.`service`和`Activity`一样要在清单里面注册\n\n3.复习一下广播的静态注册和动态注册\n```\nprivate Intent intent = new Intent(\"com.colin.demo.service.Service2\");\nintent.putExtra(\"progress\", progress);\nsendBroadcast(intent);//代表发送某一频率的广播\n```\n","source":"_posts/Service与Activity通信.md","raw":"---\ntitle: Service与Activity通信\ndate: 2016-06-14 09:54:17\ntags: Service\n---\n\n#### 主要方法\n- 1.`bindService`\n\n启动的服务可以得到一个Service的一个对象实例，然后我们就可以访问Service中的方法,停止服务使用`unbindService`\n\n- 2.`startService`\n\n启动一个服务执行后台任务，可以用广播的方式返回数据。停止服务使用stopService\n\n#### bindService使用细节\n\n1. 写一个`MyService extends Service`\n2. 通过`Binder`来获取`MyService`\n\n```\npublic IBinder onBind(Intent intent) {\n        return new MsgBinder();\n    }\n\n    /**\n     * 通过Binder对象,当Activity通过调用bindService(Intent service, ServiceConnection conn,int flags),\n     * 我们可以得到一个Service的一个对象实例，然后我们就可以访问Service中的方法\n     */\n    public class MsgBinder extends Binder {\n        public MsgService getService() {\n            return MsgService.this;\n        }\n    }\n```\n\n3. 在Activity中绑定Service并访问Service的方法\n\n```\n case R.id.btn_bind_service:\n                Intent intent = new Intent(mContext,MsgService.class);\n                bindService(intent, connection, Context.BIND_AUTO_CREATE);\n                break;\n case R.id.btn_download_start:\n                //开始下载\n                mMsgService.startDownLoad();\n                //通过接口回调更新进度\n                mMsgService.setListener(new MsgService.ProgressChangeListener() {\n                    @Override\n                    public void onChanged(int progress) {\n                        mProgressBar.setProgress(progress);\n                    }\n                });\n //Service连接的回调接口实现\n    ServiceConnection connection=new ServiceConnection() {\n        @Override\n        public void onServiceConnected(ComponentName name, IBinder service) {\n            //通过binder拿到service对象\n            mMsgService = ((MsgService.MsgBinder) service).getService();\n            Logger.i(\"onServiceConnected\");\n        }\n\n        @Override\n        public void onServiceDisconnected(ComponentName name) {\n\n        }\n    };\n```\n\n#### startService使用细节\n1.`MsgService2 extends Service`\n\n2.不管onBind,重写`onStartCommand`\n\n```\npublic IBinder onBind(Intent intent) {\n        return null;\n    }\n@Override\npublic int onStartCommand(Intent intent, int flags, int startId) {\n        startDownLoad();\n        return super.onStartCommand(intent, flags, startId);\n\n    }\n```\n3.在清单注册Service,注意这时的Service必须带intent-filter,相当于id\n```\n <service android:name=\".service.MsgService2\"  >\n            <!--这个就是Service的Id了-->\n            <intent-filter>\n                <action android:name=\"com.colin.demo.service.Service2\" />\n            </intent-filter>\n</service>\n```\n4.在Activity中使用:\n```\n case R.id.btn_register_broadcast:\n                //通过Action过滤Service\n                mMsgReceiver=new MsgReceiver();\n                registerReceiver(mMsgReceiver, new IntentFilter(\"com.colin.demo.service.Service2\"));\n                Logger.i(\"已注册广播接收器\");\n                break;\ncase R.id.btn_start_service:\n                //启动service\n                mIntent = new Intent(\"com.colin.demo.service.Service2\");\n                startService(mIntent);\n                break;\n /**\n     * 广播接收器\n     * @author len\n     *\n     */\n    public class MsgReceiver extends BroadcastReceiver {\n\n        @Override\n        public void onReceive(Context context, Intent intent) {\n            //拿到进度，更新UI\n            int progress = intent.getIntExtra(\"progress\", 0);\n            Logger.i(\"拿到进度，更新UI  \");\n            mProgressBar.setProgress(progress);\n        }\n\n}\n```\n\n#### 最后\n1.记得干掉服务\n\n```\n@Override\n    protected void onDestroy() {\n        //销毁服务\n        unbindService(connection);\n\n        //停止服务\n        stopService(mIntent);\n        //注销广播\n        unregisterReceiver(mMsgReceiver);\n        super.onDestroy();\n    }\n```\n2.`service`和`Activity`一样要在清单里面注册\n\n3.复习一下广播的静态注册和动态注册\n```\nprivate Intent intent = new Intent(\"com.colin.demo.service.Service2\");\nintent.putExtra(\"progress\", progress);\nsendBroadcast(intent);//代表发送某一频率的广播\n```\n","slug":"Service与Activity通信","published":1,"updated":"2016-06-14T02:01:47.956Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciqc6bj1p00016x05vto5n7sk","content":"<h4 id=\"主要方法\"><a href=\"#主要方法\" class=\"headerlink\" title=\"主要方法\"></a>主要方法</h4><ul>\n<li>1.<code>bindService</code></li>\n</ul>\n<p>启动的服务可以得到一个Service的一个对象实例，然后我们就可以访问Service中的方法,停止服务使用<code>unbindService</code></p>\n<ul>\n<li>2.<code>startService</code></li>\n</ul>\n<p>启动一个服务执行后台任务，可以用广播的方式返回数据。停止服务使用stopService</p>\n<h4 id=\"bindService使用细节\"><a href=\"#bindService使用细节\" class=\"headerlink\" title=\"bindService使用细节\"></a>bindService使用细节</h4><ol>\n<li>写一个<code>MyService extends Service</code></li>\n<li>通过<code>Binder</code>来获取<code>MyService</code></li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public IBinder onBind(Intent intent) &#123;</span><br><span class=\"line\">        return new MsgBinder();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 通过Binder对象,当Activity通过调用bindService(Intent service, ServiceConnection conn,int flags),</span><br><span class=\"line\">     * 我们可以得到一个Service的一个对象实例，然后我们就可以访问Service中的方法</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public class MsgBinder extends Binder &#123;</span><br><span class=\"line\">        public MsgService getService() &#123;</span><br><span class=\"line\">            return MsgService.this;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<ol>\n<li>在Activity中绑定Service并访问Service的方法</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">case R.id.btn_bind_service:</span><br><span class=\"line\">               Intent intent = new Intent(mContext,MsgService.class);</span><br><span class=\"line\">               bindService(intent, connection, Context.BIND_AUTO_CREATE);</span><br><span class=\"line\">               break;</span><br><span class=\"line\">case R.id.btn_download_start:</span><br><span class=\"line\">               //开始下载</span><br><span class=\"line\">               mMsgService.startDownLoad();</span><br><span class=\"line\">               //通过接口回调更新进度</span><br><span class=\"line\">               mMsgService.setListener(new MsgService.ProgressChangeListener() &#123;</span><br><span class=\"line\">                   @Override</span><br><span class=\"line\">                   public void onChanged(int progress) &#123;</span><br><span class=\"line\">                       mProgressBar.setProgress(progress);</span><br><span class=\"line\">                   &#125;</span><br><span class=\"line\">               &#125;);</span><br><span class=\"line\">//Service连接的回调接口实现</span><br><span class=\"line\">   ServiceConnection connection=new ServiceConnection() &#123;</span><br><span class=\"line\">       @Override</span><br><span class=\"line\">       public void onServiceConnected(ComponentName name, IBinder service) &#123;</span><br><span class=\"line\">           //通过binder拿到service对象</span><br><span class=\"line\">           mMsgService = ((MsgService.MsgBinder) service).getService();</span><br><span class=\"line\">           Logger.i(&quot;onServiceConnected&quot;);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       @Override</span><br><span class=\"line\">       public void onServiceDisconnected(ComponentName name) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"startService使用细节\"><a href=\"#startService使用细节\" class=\"headerlink\" title=\"startService使用细节\"></a>startService使用细节</h4><p>1.<code>MsgService2 extends Service</code></p>\n<p>2.不管onBind,重写<code>onStartCommand</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public IBinder onBind(Intent intent) &#123;</span><br><span class=\"line\">        return null;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">@Override</span><br><span class=\"line\">public int onStartCommand(Intent intent, int flags, int startId) &#123;</span><br><span class=\"line\">        startDownLoad();</span><br><span class=\"line\">        return super.onStartCommand(intent, flags, startId);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>3.在清单注册Service,注意这时的Service必须带intent-filter,相当于id<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> &lt;service android:name=&quot;.service.MsgService2&quot;  &gt;</span><br><span class=\"line\">            &lt;!--这个就是Service的Id了--&gt;</span><br><span class=\"line\">            &lt;intent-filter&gt;</span><br><span class=\"line\">                &lt;action android:name=&quot;com.colin.demo.service.Service2&quot; /&gt;</span><br><span class=\"line\">            &lt;/intent-filter&gt;</span><br><span class=\"line\">&lt;/service&gt;</span><br></pre></td></tr></table></figure></p>\n<p>4.在Activity中使用:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> case R.id.btn_register_broadcast:</span><br><span class=\"line\">                //通过Action过滤Service</span><br><span class=\"line\">                mMsgReceiver=new MsgReceiver();</span><br><span class=\"line\">                registerReceiver(mMsgReceiver, new IntentFilter(&quot;com.colin.demo.service.Service2&quot;));</span><br><span class=\"line\">                Logger.i(&quot;已注册广播接收器&quot;);</span><br><span class=\"line\">                break;</span><br><span class=\"line\">case R.id.btn_start_service:</span><br><span class=\"line\">                //启动service</span><br><span class=\"line\">                mIntent = new Intent(&quot;com.colin.demo.service.Service2&quot;);</span><br><span class=\"line\">                startService(mIntent);</span><br><span class=\"line\">                break;</span><br><span class=\"line\"> /**</span><br><span class=\"line\">     * 广播接收器</span><br><span class=\"line\">     * @author len</span><br><span class=\"line\">     *</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public class MsgReceiver extends BroadcastReceiver &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        public void onReceive(Context context, Intent intent) &#123;</span><br><span class=\"line\">            //拿到进度，更新UI</span><br><span class=\"line\">            int progress = intent.getIntExtra(&quot;progress&quot;, 0);</span><br><span class=\"line\">            Logger.i(&quot;拿到进度，更新UI  &quot;);</span><br><span class=\"line\">            mProgressBar.setProgress(progress);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h4><p>1.记得干掉服务</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Override</span><br><span class=\"line\">    protected void onDestroy() &#123;</span><br><span class=\"line\">        //销毁服务</span><br><span class=\"line\">        unbindService(connection);</span><br><span class=\"line\"></span><br><span class=\"line\">        //停止服务</span><br><span class=\"line\">        stopService(mIntent);</span><br><span class=\"line\">        //注销广播</span><br><span class=\"line\">        unregisterReceiver(mMsgReceiver);</span><br><span class=\"line\">        super.onDestroy();</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>2.<code>service</code>和<code>Activity</code>一样要在清单里面注册</p>\n<p>3.复习一下广播的静态注册和动态注册<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private Intent intent = new Intent(&quot;com.colin.demo.service.Service2&quot;);</span><br><span class=\"line\">intent.putExtra(&quot;progress&quot;, progress);</span><br><span class=\"line\">sendBroadcast(intent);//代表发送某一频率的广播</span><br></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<h4 id=\"主要方法\"><a href=\"#主要方法\" class=\"headerlink\" title=\"主要方法\"></a>主要方法</h4><ul>\n<li>1.<code>bindService</code></li>\n</ul>\n<p>启动的服务可以得到一个Service的一个对象实例，然后我们就可以访问Service中的方法,停止服务使用<code>unbindService</code></p>\n<ul>\n<li>2.<code>startService</code></li>\n</ul>\n<p>启动一个服务执行后台任务，可以用广播的方式返回数据。停止服务使用stopService</p>\n<h4 id=\"bindService使用细节\"><a href=\"#bindService使用细节\" class=\"headerlink\" title=\"bindService使用细节\"></a>bindService使用细节</h4><ol>\n<li>写一个<code>MyService extends Service</code></li>\n<li>通过<code>Binder</code>来获取<code>MyService</code></li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public IBinder onBind(Intent intent) &#123;</span><br><span class=\"line\">        return new MsgBinder();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 通过Binder对象,当Activity通过调用bindService(Intent service, ServiceConnection conn,int flags),</span><br><span class=\"line\">     * 我们可以得到一个Service的一个对象实例，然后我们就可以访问Service中的方法</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public class MsgBinder extends Binder &#123;</span><br><span class=\"line\">        public MsgService getService() &#123;</span><br><span class=\"line\">            return MsgService.this;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<ol>\n<li>在Activity中绑定Service并访问Service的方法</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">case R.id.btn_bind_service:</span><br><span class=\"line\">               Intent intent = new Intent(mContext,MsgService.class);</span><br><span class=\"line\">               bindService(intent, connection, Context.BIND_AUTO_CREATE);</span><br><span class=\"line\">               break;</span><br><span class=\"line\">case R.id.btn_download_start:</span><br><span class=\"line\">               //开始下载</span><br><span class=\"line\">               mMsgService.startDownLoad();</span><br><span class=\"line\">               //通过接口回调更新进度</span><br><span class=\"line\">               mMsgService.setListener(new MsgService.ProgressChangeListener() &#123;</span><br><span class=\"line\">                   @Override</span><br><span class=\"line\">                   public void onChanged(int progress) &#123;</span><br><span class=\"line\">                       mProgressBar.setProgress(progress);</span><br><span class=\"line\">                   &#125;</span><br><span class=\"line\">               &#125;);</span><br><span class=\"line\">//Service连接的回调接口实现</span><br><span class=\"line\">   ServiceConnection connection=new ServiceConnection() &#123;</span><br><span class=\"line\">       @Override</span><br><span class=\"line\">       public void onServiceConnected(ComponentName name, IBinder service) &#123;</span><br><span class=\"line\">           //通过binder拿到service对象</span><br><span class=\"line\">           mMsgService = ((MsgService.MsgBinder) service).getService();</span><br><span class=\"line\">           Logger.i(&quot;onServiceConnected&quot;);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       @Override</span><br><span class=\"line\">       public void onServiceDisconnected(ComponentName name) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"startService使用细节\"><a href=\"#startService使用细节\" class=\"headerlink\" title=\"startService使用细节\"></a>startService使用细节</h4><p>1.<code>MsgService2 extends Service</code></p>\n<p>2.不管onBind,重写<code>onStartCommand</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public IBinder onBind(Intent intent) &#123;</span><br><span class=\"line\">        return null;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">@Override</span><br><span class=\"line\">public int onStartCommand(Intent intent, int flags, int startId) &#123;</span><br><span class=\"line\">        startDownLoad();</span><br><span class=\"line\">        return super.onStartCommand(intent, flags, startId);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>3.在清单注册Service,注意这时的Service必须带intent-filter,相当于id<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> &lt;service android:name=&quot;.service.MsgService2&quot;  &gt;</span><br><span class=\"line\">            &lt;!--这个就是Service的Id了--&gt;</span><br><span class=\"line\">            &lt;intent-filter&gt;</span><br><span class=\"line\">                &lt;action android:name=&quot;com.colin.demo.service.Service2&quot; /&gt;</span><br><span class=\"line\">            &lt;/intent-filter&gt;</span><br><span class=\"line\">&lt;/service&gt;</span><br></pre></td></tr></table></figure></p>\n<p>4.在Activity中使用:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> case R.id.btn_register_broadcast:</span><br><span class=\"line\">                //通过Action过滤Service</span><br><span class=\"line\">                mMsgReceiver=new MsgReceiver();</span><br><span class=\"line\">                registerReceiver(mMsgReceiver, new IntentFilter(&quot;com.colin.demo.service.Service2&quot;));</span><br><span class=\"line\">                Logger.i(&quot;已注册广播接收器&quot;);</span><br><span class=\"line\">                break;</span><br><span class=\"line\">case R.id.btn_start_service:</span><br><span class=\"line\">                //启动service</span><br><span class=\"line\">                mIntent = new Intent(&quot;com.colin.demo.service.Service2&quot;);</span><br><span class=\"line\">                startService(mIntent);</span><br><span class=\"line\">                break;</span><br><span class=\"line\"> /**</span><br><span class=\"line\">     * 广播接收器</span><br><span class=\"line\">     * @author len</span><br><span class=\"line\">     *</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public class MsgReceiver extends BroadcastReceiver &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        public void onReceive(Context context, Intent intent) &#123;</span><br><span class=\"line\">            //拿到进度，更新UI</span><br><span class=\"line\">            int progress = intent.getIntExtra(&quot;progress&quot;, 0);</span><br><span class=\"line\">            Logger.i(&quot;拿到进度，更新UI  &quot;);</span><br><span class=\"line\">            mProgressBar.setProgress(progress);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h4><p>1.记得干掉服务</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Override</span><br><span class=\"line\">    protected void onDestroy() &#123;</span><br><span class=\"line\">        //销毁服务</span><br><span class=\"line\">        unbindService(connection);</span><br><span class=\"line\"></span><br><span class=\"line\">        //停止服务</span><br><span class=\"line\">        stopService(mIntent);</span><br><span class=\"line\">        //注销广播</span><br><span class=\"line\">        unregisterReceiver(mMsgReceiver);</span><br><span class=\"line\">        super.onDestroy();</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>2.<code>service</code>和<code>Activity</code>一样要在清单里面注册</p>\n<p>3.复习一下广播的静态注册和动态注册<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private Intent intent = new Intent(&quot;com.colin.demo.service.Service2&quot;);</span><br><span class=\"line\">intent.putExtra(&quot;progress&quot;, progress);</span><br><span class=\"line\">sendBroadcast(intent);//代表发送某一频率的广播</span><br></pre></td></tr></table></figure></p>\n"},{"title":"Ubuntu上使用React-Native","date":"2016-06-14T02:38:24.000Z","_content":"\n\n#### 1.安装NodeJs\n\n首先要做的是安装NodeJS，这是一个目前很流行的JavaScript的实现。\n\n启动终端，粘贴下面的命令，以从NodeSource 仓库来下载安装NodeJS：\n```\nsudo apt-get install -y build-essential\ncurl -sL https://deb.nodesource.com/setup_6.x | sudo -E bash -\nsudo apt-get install -y nodejs\nsudo ln -s /usr/bin/nodejs /usr/bin/node\n注：上面的命令是针对Ubuntu的\n```\n\n#### 2.安装 React-Native\n\n NodeJS包管理和分发工具,安装好NodeJs后这个应该有的,但是我没有所以:\n `sudo apt-get install npm`\n\n`npm install -g react-native-cli `\nreact-native-cli是一个终端命令，它可以完成其余的设置工作。它可以通过npm安装。刚才这条命令会往你的终端安装一个叫做react-native的命令。这个安装过程你只需要进行一次。\n\n#### 3.初始化一个项目\n\n` react-native init AwesomeProject`\n这个命令会初始化一个工程、下载React Native的所有源代码和依赖包，最后在AwesomePrjoect/iOS/AwesomeProject.xcodeproj和AwesomeProject/android/app下分别创建一个新的XCode工程和一个gradle工程。\n\n*注意:*\n由于网络原因这一步直接这样操作会慢到你爆炸,所以将npm仓库源替换为国内镜像：\n\n\n`npm config set registry https://registry.npm.taobao.org`\n`npm config set disturl https://npm.taobao.org/dist`\n\n\n另，执行init时切记不要在前面加上sudo（否则新项目的目录所有者会变为root而不是当前用户，导致一系列权限问题，请使用chown修复）。\n\n我是这么做的:创建一个文件夹`chomod +777 Floder`这样就没有权限问题了\n\n#### 4运行\n\n启动 server, 如果没有启动server , 会报错:\n```\nReact Native: ReferenceError: Can't find variable: require (line 1 in the generated bundle)\n\n```\n\n`$ react-native start`\n`$ react-native run-android`\n\n\n#### 5.细节问题\n\nA.如果提示要设置sdk的环境变量,就直接在在android文件夹下创建一个local.properties的文件,添加内容:sdk.dir=/opt/android-sdk-linux\n也可以用命令行:`touch local.propertis && echo \"sdk.dir=/opt/android-sdk-linux\" >>  local.propertis`\n\nB.跑起来的app会报红需要设置调试服务器的ip和端口,直接一条命令解决:\n\n在`android/app/src/main`创建文件夹assets\n\n```\ncurl \"http://localhost:8081/index.android.bundle?platform=android\" -o \"android/app/src/main/assets/index.android.bundle\"\n```\n","source":"_posts/Ubuntu上使用React-Native.md","raw":"---\ntitle: Ubuntu上使用React-Native\ndate: 2016-06-14 10:38:24\ntags: React-Native\n---\n\n\n#### 1.安装NodeJs\n\n首先要做的是安装NodeJS，这是一个目前很流行的JavaScript的实现。\n\n启动终端，粘贴下面的命令，以从NodeSource 仓库来下载安装NodeJS：\n```\nsudo apt-get install -y build-essential\ncurl -sL https://deb.nodesource.com/setup_6.x | sudo -E bash -\nsudo apt-get install -y nodejs\nsudo ln -s /usr/bin/nodejs /usr/bin/node\n注：上面的命令是针对Ubuntu的\n```\n\n#### 2.安装 React-Native\n\n NodeJS包管理和分发工具,安装好NodeJs后这个应该有的,但是我没有所以:\n `sudo apt-get install npm`\n\n`npm install -g react-native-cli `\nreact-native-cli是一个终端命令，它可以完成其余的设置工作。它可以通过npm安装。刚才这条命令会往你的终端安装一个叫做react-native的命令。这个安装过程你只需要进行一次。\n\n#### 3.初始化一个项目\n\n` react-native init AwesomeProject`\n这个命令会初始化一个工程、下载React Native的所有源代码和依赖包，最后在AwesomePrjoect/iOS/AwesomeProject.xcodeproj和AwesomeProject/android/app下分别创建一个新的XCode工程和一个gradle工程。\n\n*注意:*\n由于网络原因这一步直接这样操作会慢到你爆炸,所以将npm仓库源替换为国内镜像：\n\n\n`npm config set registry https://registry.npm.taobao.org`\n`npm config set disturl https://npm.taobao.org/dist`\n\n\n另，执行init时切记不要在前面加上sudo（否则新项目的目录所有者会变为root而不是当前用户，导致一系列权限问题，请使用chown修复）。\n\n我是这么做的:创建一个文件夹`chomod +777 Floder`这样就没有权限问题了\n\n#### 4运行\n\n启动 server, 如果没有启动server , 会报错:\n```\nReact Native: ReferenceError: Can't find variable: require (line 1 in the generated bundle)\n\n```\n\n`$ react-native start`\n`$ react-native run-android`\n\n\n#### 5.细节问题\n\nA.如果提示要设置sdk的环境变量,就直接在在android文件夹下创建一个local.properties的文件,添加内容:sdk.dir=/opt/android-sdk-linux\n也可以用命令行:`touch local.propertis && echo \"sdk.dir=/opt/android-sdk-linux\" >>  local.propertis`\n\nB.跑起来的app会报红需要设置调试服务器的ip和端口,直接一条命令解决:\n\n在`android/app/src/main`创建文件夹assets\n\n```\ncurl \"http://localhost:8081/index.android.bundle?platform=android\" -o \"android/app/src/main/assets/index.android.bundle\"\n```\n","slug":"Ubuntu上使用React-Native","published":1,"updated":"2016-06-14T02:42:10.120Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciqc6bj1t00036x057rdbu16h","content":"<h4 id=\"1-安装NodeJs\"><a href=\"#1-安装NodeJs\" class=\"headerlink\" title=\"1.安装NodeJs\"></a>1.安装NodeJs</h4><p>首先要做的是安装NodeJS，这是一个目前很流行的JavaScript的实现。</p>\n<p>启动终端，粘贴下面的命令，以从NodeSource 仓库来下载安装NodeJS：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install -y build-essential</span><br><span class=\"line\">curl -sL https://deb.nodesource.com/setup_6.x | sudo -E bash -</span><br><span class=\"line\">sudo apt-get install -y nodejs</span><br><span class=\"line\">sudo ln -s /usr/bin/nodejs /usr/bin/node</span><br><span class=\"line\">注：上面的命令是针对Ubuntu的</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"2-安装-React-Native\"><a href=\"#2-安装-React-Native\" class=\"headerlink\" title=\"2.安装 React-Native\"></a>2.安装 React-Native</h4><p> NodeJS包管理和分发工具,安装好NodeJs后这个应该有的,但是我没有所以:<br> <code>sudo apt-get install npm</code></p>\n<p><code>npm install -g react-native-cli</code><br>react-native-cli是一个终端命令，它可以完成其余的设置工作。它可以通过npm安装。刚才这条命令会往你的终端安装一个叫做react-native的命令。这个安装过程你只需要进行一次。</p>\n<h4 id=\"3-初始化一个项目\"><a href=\"#3-初始化一个项目\" class=\"headerlink\" title=\"3.初始化一个项目\"></a>3.初始化一个项目</h4><p><code>react-native init AwesomeProject</code><br>这个命令会初始化一个工程、下载React Native的所有源代码和依赖包，最后在AwesomePrjoect/iOS/AwesomeProject.xcodeproj和AwesomeProject/android/app下分别创建一个新的XCode工程和一个gradle工程。</p>\n<p><em>注意:</em><br>由于网络原因这一步直接这样操作会慢到你爆炸,所以将npm仓库源替换为国内镜像：</p>\n<p><code>npm config set registry https://registry.npm.taobao.org</code><br><code>npm config set disturl https://npm.taobao.org/dist</code></p>\n<p>另，执行init时切记不要在前面加上sudo（否则新项目的目录所有者会变为root而不是当前用户，导致一系列权限问题，请使用chown修复）。</p>\n<p>我是这么做的:创建一个文件夹<code>chomod +777 Floder</code>这样就没有权限问题了</p>\n<h4 id=\"4运行\"><a href=\"#4运行\" class=\"headerlink\" title=\"4运行\"></a>4运行</h4><p>启动 server, 如果没有启动server , 会报错:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">React Native: ReferenceError: Can&apos;t find variable: require (line 1 in the generated bundle)</span><br></pre></td></tr></table></figure></p>\n<p><code>$ react-native start</code><br><code>$ react-native run-android</code></p>\n<h4 id=\"5-细节问题\"><a href=\"#5-细节问题\" class=\"headerlink\" title=\"5.细节问题\"></a>5.细节问题</h4><p>A.如果提示要设置sdk的环境变量,就直接在在android文件夹下创建一个local.properties的文件,添加内容:sdk.dir=/opt/android-sdk-linux<br>也可以用命令行:<code>touch local.propertis &amp;&amp; echo &quot;sdk.dir=/opt/android-sdk-linux&quot; &gt;&gt;  local.propertis</code></p>\n<p>B.跑起来的app会报红需要设置调试服务器的ip和端口,直接一条命令解决:</p>\n<p>在<code>android/app/src/main</code>创建文件夹assets</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl &quot;http://localhost:8081/index.android.bundle?platform=android&quot; -o &quot;android/app/src/main/assets/index.android.bundle&quot;</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h4 id=\"1-安装NodeJs\"><a href=\"#1-安装NodeJs\" class=\"headerlink\" title=\"1.安装NodeJs\"></a>1.安装NodeJs</h4><p>首先要做的是安装NodeJS，这是一个目前很流行的JavaScript的实现。</p>\n<p>启动终端，粘贴下面的命令，以从NodeSource 仓库来下载安装NodeJS：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install -y build-essential</span><br><span class=\"line\">curl -sL https://deb.nodesource.com/setup_6.x | sudo -E bash -</span><br><span class=\"line\">sudo apt-get install -y nodejs</span><br><span class=\"line\">sudo ln -s /usr/bin/nodejs /usr/bin/node</span><br><span class=\"line\">注：上面的命令是针对Ubuntu的</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"2-安装-React-Native\"><a href=\"#2-安装-React-Native\" class=\"headerlink\" title=\"2.安装 React-Native\"></a>2.安装 React-Native</h4><p> NodeJS包管理和分发工具,安装好NodeJs后这个应该有的,但是我没有所以:<br> <code>sudo apt-get install npm</code></p>\n<p><code>npm install -g react-native-cli</code><br>react-native-cli是一个终端命令，它可以完成其余的设置工作。它可以通过npm安装。刚才这条命令会往你的终端安装一个叫做react-native的命令。这个安装过程你只需要进行一次。</p>\n<h4 id=\"3-初始化一个项目\"><a href=\"#3-初始化一个项目\" class=\"headerlink\" title=\"3.初始化一个项目\"></a>3.初始化一个项目</h4><p><code>react-native init AwesomeProject</code><br>这个命令会初始化一个工程、下载React Native的所有源代码和依赖包，最后在AwesomePrjoect/iOS/AwesomeProject.xcodeproj和AwesomeProject/android/app下分别创建一个新的XCode工程和一个gradle工程。</p>\n<p><em>注意:</em><br>由于网络原因这一步直接这样操作会慢到你爆炸,所以将npm仓库源替换为国内镜像：</p>\n<p><code>npm config set registry https://registry.npm.taobao.org</code><br><code>npm config set disturl https://npm.taobao.org/dist</code></p>\n<p>另，执行init时切记不要在前面加上sudo（否则新项目的目录所有者会变为root而不是当前用户，导致一系列权限问题，请使用chown修复）。</p>\n<p>我是这么做的:创建一个文件夹<code>chomod +777 Floder</code>这样就没有权限问题了</p>\n<h4 id=\"4运行\"><a href=\"#4运行\" class=\"headerlink\" title=\"4运行\"></a>4运行</h4><p>启动 server, 如果没有启动server , 会报错:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">React Native: ReferenceError: Can&apos;t find variable: require (line 1 in the generated bundle)</span><br></pre></td></tr></table></figure></p>\n<p><code>$ react-native start</code><br><code>$ react-native run-android</code></p>\n<h4 id=\"5-细节问题\"><a href=\"#5-细节问题\" class=\"headerlink\" title=\"5.细节问题\"></a>5.细节问题</h4><p>A.如果提示要设置sdk的环境变量,就直接在在android文件夹下创建一个local.properties的文件,添加内容:sdk.dir=/opt/android-sdk-linux<br>也可以用命令行:<code>touch local.propertis &amp;&amp; echo &quot;sdk.dir=/opt/android-sdk-linux&quot; &gt;&gt;  local.propertis</code></p>\n<p>B.跑起来的app会报红需要设置调试服务器的ip和端口,直接一条命令解决:</p>\n<p>在<code>android/app/src/main</code>创建文件夹assets</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl &quot;http://localhost:8081/index.android.bundle?platform=android&quot; -o &quot;android/app/src/main/assets/index.android.bundle&quot;</span><br></pre></td></tr></table></figure>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"ciqc6bj1l00006x05zh1ka0b6","tag_id":"ciqc6bj1r00026x05qsrrzgj8","_id":"ciqc6bj1u00056x05k5etw9od"},{"post_id":"ciqc6bj1p00016x05vto5n7sk","tag_id":"ciqc6bj1u00046x05h30oc3jy","_id":"ciqc6bj1v00076x05y6x0jq3c"},{"post_id":"ciqc6bj1t00036x057rdbu16h","tag_id":"ciqc6bj1v00066x05ahf6u1xu","_id":"ciqc6bj1v00086x05um0f9gyu"}],"Tag":[{"name":"Hexo","_id":"ciqc6bj1r00026x05qsrrzgj8"},{"name":"Service","_id":"ciqc6bj1u00046x05h30oc3jy"},{"name":"React-Native","_id":"ciqc6bj1v00066x05ahf6u1xu"}]}}